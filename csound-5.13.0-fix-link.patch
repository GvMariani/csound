--- SConstruct.link	2011-05-19 08:02:45.000000000 +0200
+++ SConstruct	2011-05-19 08:14:03.000000000 +0200
@@ -1328,7 +1328,7 @@
 #############################################################################
 
 csoundProgramEnvironment = commonEnvironment.Clone()
-csoundProgramEnvironment.Append(LINKFLAGS = libCsoundLinkFlags)
+csoundProgramEnvironment.Append(LINKFLAGS = libCsoundLinkFlags+Split(commonEnvironment['customSHLINKFLAGS']))
 csoundProgramEnvironment.Append(LIBS = libCsoundLibs)
 
 
@@ -1491,6 +1491,7 @@
     else:
         print 'CONFIGURATION DECISION: Building Java wrapper to Csound C++ interface library.'
         javaWrapperEnvironment = csoundWrapperEnvironment.Clone()
+	javaWrapperEnvironment.Append(LINKFLAGS = Split(commonEnvironment['customSHLINKFLAGS']))
 	javaWrapperEnvironment.Prepend(LIBS = ['csnd'])
         if getPlatform() == 'darwin':
             javaWrapperEnvironment.Append(CPPPATH =
@@ -1880,7 +1881,7 @@
 if pulseaudioFound and (getPlatform() == 'linux' or getPlatform() == 'sunos'):
    print "CONFIGURATION DECISION: Building PulseAudio plugin"
    pulseaudioEnv = pluginEnvironment.Clone()
-   pulseaudioEnv.Append(LIBS = ['pulse-simple'])
+   pulseaudioEnv.Append(LIBS = ['pulse-simple', 'pulse'])
    makePlugin(pulseaudioEnv, 'rtpulse', ['InOut/rtpulse.c'])
 
 if getPlatform() == 'win32':
@@ -1970,7 +1971,7 @@
 else:
     print "CONFIGURATION DECISION: Building OGG plugins."
     oggEnvironment = pluginEnvironment.Clone()
-    oggEnvironment.Append(LINKFLAGS = ['-lvorbisfile', '-lvorbis', '-logg'])
+    oggEnvironment.Append(LIBS = ['-lvorbisfile', '-lvorbis', '-logg'])
     makePlugin(oggEnvironment, 'oggplay', ['Opcodes/oggplay.c'])
 # end ogg opcodes
 
@@ -2252,18 +2253,18 @@
   executables.append(a)
   Depends(a, csoundLibrary)
   if compilerGNU():
-    a = commonEnvironment.Program('cs-launcher', ['util1/csd_util/cs.c'])
+    a = csoundProgramEnvironment.Program('cs-launcher', ['util1/csd_util/cs.c'])
     executables.append(a)
     Depends(a, csoundLibrary)
-    executables.append(commonEnvironment.Program('csb64enc',
+    executables.append(csoundProgramEnvironment.Program('csb64enc',
       ['util1/csd_util/base64.c', 'util1/csd_util/csb64enc.c']))
-    executables.append(commonEnvironment.Program('makecsd',
+    executables.append(csoundProgramEnvironment.Program('makecsd',
       ['util1/csd_util/base64.c', 'util1/csd_util/makecsd.c']))
-    executables.append(commonEnvironment.Program('cs-scot',
+    executables.append(csoundProgramEnvironment.Program('cs-scot',
       ['util1/scot/scot_main.c', 'util1/scot/scot.c']))
 #executables.append(csoundProgramEnvironment.Program('cscore',
 #    ['util1/cscore/cscore_main.c']))
-  executables.append(commonEnvironment.Program('sdif2ad',
+  executables.append(csoundProgramEnvironment.Program('sdif2ad',
     ['SDIF/sdif2adsyn.c', 'SDIF/sdif.c', 'SDIF/sdif-mem.c']))
 
 for i in executables:
@@ -2680,6 +2681,7 @@
         lib1 = 'tcl%s' % commonEnvironment['tclversion']
         lib2 = 'tk%s' % commonEnvironment['tclversion']
         csTclEnvironment.Append(LIBS = [lib1, lib2, 'dl', 'pthread'])
+	csTclEnvironment.Append(LINKFLAGS = Split(commonEnvironment['customSHLINKFLAGS']))
     elif getPlatform() == 'win32':
         lib1 = 'tcl%s' % commonEnvironment['tclversion']
         lib2 = 'tk%s' % commonEnvironment['tclversion']
